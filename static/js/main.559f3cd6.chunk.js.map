{"version":3,"sources":["components/Dashboard/parseInput.ts","components/Dashboard/Table/styles.ts","components/Dashboard/Table/DefaultColumnFilter/styles.ts","components/Dashboard/Table/DefaultColumnFilter/index.tsx","components/Dashboard/Table/index.tsx","components/Dashboard/index.tsx","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseInput","str","split","filter","length","map","JSON","parse","err","TContainer","styled","div","THeader","TBody","Th","p","canSort","Td","Tr","selector","empty","Container","Input","input","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","useState","value","setValue","count","onChange","useAsyncDebounce","val","undefined","e","target","placeholder","compareDates","memoize","a","b","aDate","Date","bDate","aTime","getTime","bTime","datetimeCompare","rowA","rowB","columnId","values","listUniqueValues","set","Set","add","Array","from","showAggregatedFromListUniqueValues","stringify","Table","sensorReadings","loading","error","columns","useMemo","Header","accessor","disableGroupBy","aggregate","Aggregated","disableSortBy","disableFilters","sortType","Cell","props","formatted","toUTCString","defaultColumn","Filter","width","useTable","data","useFilters","useGroupBy","useSortBy","useExpanded","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","React","useCallback","index","style","row","getRowProps","cells","cell","getCellProps","isGrouped","getToggleRowExpandedProps","isExpanded","render","subRows","isAggregated","isPlaceholder","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","key","canFilter","canGroupBy","getGroupByToggleProps","height","itemCount","itemSize","Dashboard","dataState","setDataState","useWorker","parseWorker","useEffect","axios","get","then","res","catch","message","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.559f3cd6.chunk.js","sourcesContent":["import { SensorReading } from '../../types';\n\nconst parseInput = (str: string): Array<SensorReading | {}> => {\n  const parsed: Array<SensorReading | {}> = str\n    .split('\\n')\n    .filter((str) => str.length)\n    .map((str) => {\n      try {\n        const json: SensorReading = JSON.parse(str);\n        return json;\n      } catch (err) {\n        return {};\n      }\n    });\n\n  return parsed;\n};\n\nexport default parseInput;\n","import styled from 'styled-components';\n\nexport const TContainer = styled.div`\n  display: inline-block;\n  border-spacing: 0;\n  border: 1px solid black;\n`;\n\nexport const THeader = styled.div`\n  border-bottom: 1px solid black;\n  background-color: papayawhip;\n`;\n\nexport const TBody = styled.div``;\n\nexport const Th = styled.div<{ canSort?: boolean }>`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n  font-weight: 600;\n\n  ${(p) =>\n    p.canSort &&\n    `\n  background-color: yellow;\n\n  &:hover {\n    opacity: 0.5;\n  }\n  `}\n`;\n\nexport const Td = styled.div`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n`;\n\nexport const Tr = styled.div<{ empty?: boolean }>`\n  &:last-child {\n    .${Td.selector} {\n      border-bottom: 0;\n    }\n  }\n\n  ${(p) =>\n    p.empty &&\n    `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 36px;\n  `}\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  padding: 0 4px;\n  box-sizing: border-box;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n`;\n","import React, { useState } from 'react';\nimport { useAsyncDebounce } from 'react-table';\nimport { Container, Input } from './styles';\n\nconst DefaultColumnFilter: React.FC<{ column: any }> = ({\n  column: { filterValue, preFilteredRows, setFilter },\n}) => {\n  const [value, setValue] = useState(filterValue);\n  const count = preFilteredRows.length;\n\n  const onChange = useAsyncDebounce((val: string | undefined) => {\n    setFilter(val || undefined);\n  }, 200);\n\n  return (\n    <Container>\n      <Input\n        value={value || ''}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    </Container>\n  );\n};\n\nexport default DefaultColumnFilter;\n","import React, { useMemo } from 'react';\nimport memoize from 'fast-memoize';\nimport {\n  useTable,\n  useBlockLayout,\n  useSortBy,\n  Column,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  Row,\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nimport { SensorReading } from '../../../types';\nimport { TContainer, THeader, TBody, Tr, Td, Th } from './styles';\nimport DefaultColumnFilter from './DefaultColumnFilter';\nexport interface TableProps {\n  sensorReadings: Array<SensorReading | {}>;\n  loading: boolean;\n  error?: string;\n}\n\nexport const compareDates = memoize((a: string, b: string): number => {\n  if (!a) {\n    return -1;\n  }\n\n  if (!b) {\n    return 1;\n  }\n\n  const aDate = new Date(`${a}Z`);\n  const bDate = new Date(`${a}Z`);\n\n  const aTime = aDate.getTime();\n  const bTime = bDate.getTime();\n\n  return aTime === bTime ? 0 : aTime > bTime ? 1 : -1;\n});\n\nexport const datetimeCompare = (\n  rowA: Row,\n  rowB: Row,\n  columnId: string\n): number => {\n  let [a, b] = [rowA.values[columnId], rowB.values[columnId]];\n\n  return compareDates(a, b);\n};\n\nexport const TABLE_HEIGHT_PX = 600;\nexport const ROW_HEIGHT_PX = 66;\n\nexport const listUniqueValues = memoize((values: string[]): string[] => {\n  const set = new Set();\n  for (const val of values) {\n    set.add(val);\n  }\n  const res = Array.from(set) as string[];\n\n  return res;\n});\n\nconst showAggregatedFromListUniqueValues = ({\n  value,\n}: {\n  value: string[];\n}): string => (value.length > 1 ? JSON.stringify(value) : value[0]);\n\nexport const Table: React.FC<TableProps> = ({\n  sensorReadings,\n  loading,\n  error,\n}) => {\n  const columns = useMemo(\n    () =>\n      [\n        {\n          Header: 'ID',\n          accessor: 'id',\n          disableGroupBy: false,\n        },\n        {\n          Header: 'Box ID',\n          accessor: 'box_id',\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          accessor: 'sensor_type',\n          Header: 'Type of the sensor',\n          disableSortBy: false,\n          disableFilters: false,\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: 'Type of data',\n          accessor: 'name',\n          disableFilters: false,\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: 'Range',\n          columns: [\n            {\n              Header: 'Lower bound',\n              accessor: 'range_l',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n            {\n              Header: 'Upper bound',\n              accessor: 'range_u',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n          ],\n        },\n        {\n          Header: 'Geolocation',\n          columns: [\n            {\n              Header: 'Latitude',\n              accessor: 'latitude',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n            {\n              Header: 'Longitude',\n              accessor: 'longitude',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n          ],\n        },\n        {\n          Header: 'Measurement unit',\n          accessor: 'unit',\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: 'Actual value (Reading)',\n          accessor: 'reading',\n          aggregate: 'median',\n        },\n        {\n          Header: 'Timestamp',\n          accessor: 'reading_ts',\n          sortType: datetimeCompare,\n          disableSortBy: false,\n          Cell: (props) => {\n            if (!props.value) {\n              return null;\n            }\n\n            const date = new Date(`${props.value}Z`);\n            const formatted = date.toUTCString();\n            return <span>{formatted}</span>;\n          },\n          aggregate: 'uniqueCount',\n          Aggregated: ({ value }) => `${value} unique entries`,\n        },\n      ] as Column<SensorReading | {}>[],\n    []\n  );\n\n  const defaultColumn: Partial<Column<SensorReading | {}>> = useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      disableFilters: true,\n      disableSortBy: true,\n      disableGroupBy: true,\n      width: 150,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data: sensorReadings,\n      defaultColumn,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n      prepareRow(row);\n      return (\n        <Tr\n          {...row.getRowProps({\n            style,\n          })}\n        >\n          {row.cells.map((cell) => {\n            return (\n              <Td {...cell.getCellProps()}>\n                {' '}\n                {cell.isGrouped ? (\n                  // If it's a grouped cell, add an expander and row count\n                  <>\n                    <span {...row.getToggleRowExpandedProps()}>\n                      {row.isExpanded ? '👇' : '👉'}\n                    </span>{' '}\n                    {cell.render('Cell')} ({row.subRows.length})\n                  </>\n                ) : cell.isAggregated ? (\n                  // If the cell is aggregated, use the Aggregated\n                  // renderer for cell\n                  cell.render('Aggregated')\n                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                  // Otherwise, just render the regular cell\n                  cell.render('Cell')\n                )}\n              </Td>\n            );\n          })}\n        </Tr>\n      );\n    },\n    [prepareRow, rows]\n  );\n\n  return (\n    <TContainer {...getTableProps()}>\n      <THeader>\n        {headerGroups.map((headerGroup) => (\n          <Tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <Th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                canSort={column.canSort}\n              >\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\n                </span>\n              </Th>\n            ))}\n          </Tr>\n        ))}\n        {headerGroups.length > 0 && (\n          <Tr {...headerGroups[1].getHeaderGroupProps()} key=\"Filtering\">\n            {headerGroups[1].headers.map((column) => (\n              <Th {...column.getHeaderProps()}>\n                {column.canFilter ? column.render('Filter') : null}\n              </Th>\n            ))}\n          </Tr>\n        )}\n\n        {headerGroups.length > 0 && (\n          <Tr {...headerGroups[1].getHeaderGroupProps()} key=\"Aggregation\">\n            {headerGroups[1].headers.map((column) => (\n              <Th {...column.getHeaderProps()}>\n                {column.canGroupBy ? (\n                  <span {...column.getGroupByToggleProps()}>\n                    {column.isGrouped ? 'Exit aggregation🛑 ' : 'Aggregate👊'}\n                  </span>\n                ) : null}\n              </Th>\n            ))}\n          </Tr>\n        )}\n      </THeader>\n\n      <TBody {...getTableBodyProps()}>\n        {rows.length > 0 ? (\n          <FixedSizeList\n            height={TABLE_HEIGHT_PX}\n            itemCount={rows.length}\n            itemSize={ROW_HEIGHT_PX}\n            width={totalColumnsWidth}\n          >\n            {RenderRow}\n          </FixedSizeList>\n        ) : (\n          <Tr empty>\n            {loading ? 'Loading' : 'No data was found'}\n            {error && `[Got an error: ${error}]`}\n          </Tr>\n        )}\n      </TBody>\n    </TContainer>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWorker } from '@koale/useworker';\n\nimport { DATA_URL } from '../../config';\nimport { SensorReading } from '../../types';\nimport parseInput from './parseInput';\nimport Table from './Table';\n\nconst Dashboard: React.FC = () => {\n  const [dataState, setDataState] = useState<{\n    loading: boolean;\n    error: string;\n    sensorReadings: Array<SensorReading | {}>;\n  }>({\n    loading: false,\n    error: '',\n    sensorReadings: [],\n  });\n  const [parseWorker] = useWorker(parseInput);\n\n  useEffect(() => {\n    setDataState({\n      loading: true,\n      error: '',\n      sensorReadings: [],\n    });\n    axios\n      .get<string>(DATA_URL)\n      .then(({ data }) => {\n        // Offload the parsing of incoming data to the web worker\n        return parseWorker(data);\n      })\n      .then((res) => {\n        setDataState({\n          loading: false,\n          error: '',\n          sensorReadings: res,\n        });\n      })\n      .catch((err) => {\n        setDataState({\n          loading: false,\n          error: err.message || 'Error',\n          sensorReadings: [],\n        });\n      });\n  }, [parseWorker]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n\n      <Table\n        sensorReadings={dataState.sensorReadings}\n        loading={dataState.loading}\n        error={dataState.error}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export const DATA_URL =\n  'https://bitbucket.org/sensatmapp/angular-take-home-test-1/raw/c071f2057457da27d051617ce2c9fbf18f1f263e/data/sensor_readings.json';\n","import './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}