{"version":3,"sources":["components/Dashboard/parseInput.ts","components/Dashboard/Table/styles.ts","components/Dashboard/Table/utils.ts","components/Dashboard/Table/DefaultColumnFilter/styles.ts","components/Dashboard/Table/DefaultColumnFilter/index.tsx","components/Dashboard/Table/index.tsx","components/Dashboard/index.tsx","config.ts","styles.ts","App.tsx","index.tsx"],"names":["parseInput","str","split","filter","length","map","JSON","parse","err","TContainer","styled","div","THeader","TBody","Th","p","canSort","Td","Tr","selector","empty","compareDates","memoize","compareStr","a","b","aDate","Date","bDate","aTime","getTime","bTime","datetimeCompare","rowA","rowB","columnId","values","encodeMemoArg","listUniqueValues","set","Set","val","add","Array","from","showAggregatedFromListUniqueValues","value","stringify","Container","Input","input","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","useState","setValue","count","onChange","debounce","undefined","e","target","placeholder","Table","sensorReadings","loading","error","columns","useMemo","Header","accessor","aggregate","Aggregated","disableGroupBy","disableSortBy","disableFilters","isGrouped","sortType","Cell","props","formatted","toUTCString","defaultColumn","Filter","width","useTable","data","useFilters","useGroupBy","useSortBy","useExpanded","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","React","useCallback","index","style","row","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","render","subRows","isAggregated","isPlaceholder","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","key","canFilter","canGroupBy","getGroupByToggleProps","height","itemCount","itemSize","Dashboard","dataState","setDataState","useWorker","parseWorker","useEffect","axios","get","then","res","catch","message","GlobalStyle","createGlobalStyle","AppContainer","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90e38dd6.chunk.js","sourcesContent":["import { SensorReading } from '../../types';\n\nconst parseInput = (str: string): Array<SensorReading | {}> => {\n  const parsed: Array<SensorReading | {}> = str\n    .split('\\n')\n    .filter((str) => str.length)\n    .map((str) => {\n      try {\n        const json: SensorReading = JSON.parse(str);\n        return json;\n      } catch (err) {\n        return {};\n      }\n    });\n\n  return parsed;\n};\n\nexport default parseInput;\n","import styled from 'styled-components';\n\nexport const TContainer = styled.div`\n  display: inline-block;\n  border-spacing: 0;\n  border: 1px solid black;\n`;\n\nexport const THeader = styled.div`\n  border-bottom: 1px solid black;\n  background-color: papayawhip;\n`;\n\nexport const TBody = styled.div``;\n\nexport const Th = styled.div<{ canSort?: boolean }>`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n  font-weight: 600;\n\n  ${(p) =>\n    p.canSort &&\n    `\n  background-color: yellow;\n\n  &:hover {\n    opacity: 0.5;\n  }\n  `}\n`;\n\nexport const Td = styled.div`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n`;\n\nexport const Tr = styled.div<{ empty?: boolean }>`\n  &:last-child {\n    .${Td.selector} {\n      border-bottom: 0;\n    }\n  }\n\n  ${(p) =>\n    p.empty &&\n    `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 36px;\n  `}\n`;\n","import memoize from 'fast-memoize';\nimport { Row } from 'react-table';\n\nconst encodeMemoArg = (a: string, b: string): string => `${a}~${b}`;\nconst decodeMemoArg = (str: string): string[] => str.split(`~`);\n\nexport const compareDates = memoize((compareStr: string): number => {\n  const [a, b] = decodeMemoArg(compareStr);\n\n  if (!a) {\n    return -1;\n  }\n\n  if (!b) {\n    return 1;\n  }\n\n  const aDate = new Date(`${a}Z`);\n  const bDate = new Date(`${b}Z`);\n\n  const aTime = aDate.getTime();\n  const bTime = bDate.getTime();\n\n  return aTime === bTime ? 0 : aTime > bTime ? 1 : -1;\n});\n\nexport const datetimeCompare = (\n  rowA: Row,\n  rowB: Row,\n  columnId: string\n): number => {\n  let [a, b] = [rowA.values[columnId], rowB.values[columnId]];\n\n  return compareDates(encodeMemoArg(a, b));\n};\n\nexport const listUniqueValues = memoize((values: string[]): string[] => {\n  const set = new Set();\n  for (const val of values) {\n    set.add(val);\n  }\n  const res = Array.from(set) as string[];\n\n  return res;\n});\n\nexport const showAggregatedFromListUniqueValues = ({\n  value,\n}: {\n  value: string[];\n}): string => (value.length > 1 ? JSON.stringify(value) : value[0]);\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  padding: 0 4px;\n  box-sizing: border-box;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n`;\n","import React, { useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport { Container, Input } from './styles';\n\nexport interface DefaultColumnFilterProps {\n  column: {\n    filterValue: string;\n    preFilteredRows: object[];\n    setFilter: (val: string | undefined) => void;\n  };\n}\n\nconst DefaultColumnFilter: React.FC<DefaultColumnFilterProps> = ({\n  column: { filterValue, preFilteredRows, setFilter },\n}) => {\n  const [value, setValue] = useState(filterValue);\n  const count = preFilteredRows.length;\n\n  const onChange = debounce((val: string | undefined) => {\n    setFilter(val || undefined);\n  }, 200);\n\n  return (\n    <Container>\n      <Input\n        value={value || ''}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    </Container>\n  );\n};\n\nexport default DefaultColumnFilter;\n","import React, { useMemo } from 'react';\nimport {\n  useTable,\n  useBlockLayout,\n  useSortBy,\n  Column,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nimport { SensorReading } from '../../../types';\nimport { TContainer, THeader, TBody, Tr, Td, Th } from './styles';\nimport {\n  datetimeCompare,\n  listUniqueValues,\n  showAggregatedFromListUniqueValues,\n} from './utils';\nimport DefaultColumnFilter from './DefaultColumnFilter';\nexport interface TableProps {\n  sensorReadings: Array<SensorReading | {}>;\n  loading: boolean;\n  error?: string;\n}\n\nexport const TABLE_HEIGHT_PX = 600;\nexport const ROW_HEIGHT_PX = 66;\n\nexport const Table: React.FC<TableProps> = ({\n  sensorReadings,\n  loading,\n  error,\n}) => {\n  const columns = useMemo(\n    () =>\n      [\n        {\n          Header: 'ID',\n          accessor: 'id',\n          aggregate: 'count',\n          Aggregated: ({ value }) => `${value} IDs`,\n        },\n        {\n          Header: 'Box ID',\n          accessor: 'box_id',\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          accessor: 'sensor_type',\n          Header: 'Type of the sensor',\n          disableGroupBy: false,\n          disableSortBy: false,\n          disableFilters: false,\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: 'Type of data',\n          accessor: 'name',\n          disableFilters: false,\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: 'Range',\n          columns: [\n            {\n              Header: 'Lower bound',\n              accessor: 'range_l',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n            {\n              Header: 'Upper bound',\n              accessor: 'range_u',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n          ],\n        },\n        {\n          Header: 'Geolocation',\n          columns: [\n            {\n              Header: 'Latitude',\n              accessor: 'latitude',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n            {\n              Header: 'Longitude',\n              accessor: 'longitude',\n              aggregate: listUniqueValues,\n              Aggregated: showAggregatedFromListUniqueValues,\n            },\n          ],\n        },\n        {\n          Header: 'Measurement unit',\n          accessor: 'unit',\n          aggregate: listUniqueValues,\n          Aggregated: showAggregatedFromListUniqueValues,\n        },\n        {\n          Header: ({ columns }) =>\n            columns.length > 0 &&\n            columns.filter((column) => column.isGrouped).length > 0\n              ? 'Median reading value'\n              : 'Reading value',\n          accessor: 'reading',\n          aggregate: 'median',\n        },\n        {\n          Header: 'Timestamp',\n          accessor: 'reading_ts',\n          sortType: datetimeCompare,\n          disableSortBy: false,\n          Cell: (props) => {\n            if (!props.value) {\n              return null;\n            }\n\n            const date = new Date(`${props.value}Z`);\n            const formatted = date.toUTCString();\n            return <span>{formatted}</span>;\n          },\n          Aggregated: () => '',\n        },\n      ] as Column<SensorReading | {}>[],\n    []\n  );\n\n  const defaultColumn: Partial<Column<SensorReading | {}>> = useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      disableFilters: true,\n      disableSortBy: true,\n      disableGroupBy: true,\n      width: 150,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data: sensorReadings,\n      defaultColumn,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n      prepareRow(row);\n      return (\n        <Tr\n          {...row.getRowProps({\n            style,\n          })}\n        >\n          {row.cells.map((cell) => {\n            return (\n              <Td {...cell.getCellProps()}>\n                {' '}\n                {cell.isGrouped ? (\n                  // If it's a grouped cell, add an expander and row count\n                  <>\n                    <span {...row.getToggleRowExpandedProps()}>\n                      {row.isExpanded ? '👇' : '👉'}\n                    </span>{' '}\n                    {cell.render('Cell')} ({row.subRows.length})\n                  </>\n                ) : cell.isAggregated ? (\n                  // If the cell is aggregated, use the Aggregated\n                  // renderer for cell\n                  cell.render('Aggregated')\n                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                  // Otherwise, just render the regular cell\n                  cell.render('Cell')\n                )}\n              </Td>\n            );\n          })}\n        </Tr>\n      );\n    },\n    [prepareRow, rows]\n  );\n\n  return (\n    <TContainer {...getTableProps()}>\n      <THeader>\n        {headerGroups.map((headerGroup) => (\n          <Tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <Th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                canSort={column.canSort}\n              >\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\n                </span>\n              </Th>\n            ))}\n          </Tr>\n        ))}\n        {headerGroups.length > 0 && (\n          <Tr {...headerGroups[1].getHeaderGroupProps()} key=\"Filtering\">\n            {headerGroups[1].headers.map((column) => (\n              <Th {...column.getHeaderProps()}>\n                {column.canFilter ? column.render('Filter') : null}\n              </Th>\n            ))}\n          </Tr>\n        )}\n\n        {headerGroups.length > 0 && (\n          <Tr {...headerGroups[1].getHeaderGroupProps()} key=\"Aggregation\">\n            {headerGroups[1].headers.map((column) => (\n              <Th {...column.getHeaderProps()}>\n                {column.canGroupBy ? (\n                  <span {...column.getGroupByToggleProps()}>\n                    {column.isGrouped ? 'Exit aggregation🛑 ' : 'Aggregate👊'}\n                  </span>\n                ) : null}\n              </Th>\n            ))}\n          </Tr>\n        )}\n      </THeader>\n\n      <TBody {...getTableBodyProps()}>\n        {rows.length > 0 ? (\n          <FixedSizeList\n            height={TABLE_HEIGHT_PX}\n            itemCount={rows.length}\n            itemSize={ROW_HEIGHT_PX}\n            width={totalColumnsWidth}\n          >\n            {RenderRow}\n          </FixedSizeList>\n        ) : (\n          <Tr empty>\n            {loading ? 'Loading' : 'No data was found'}\n            {error && `[Got an error: ${error}]`}\n          </Tr>\n        )}\n      </TBody>\n    </TContainer>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWorker } from '@koale/useworker';\n\nimport { DATA_URL } from '../../config';\nimport { SensorReading } from '../../types';\nimport parseInput from './parseInput';\nimport Table from './Table';\n\nconst Dashboard: React.FC = () => {\n  const [dataState, setDataState] = useState<{\n    loading: boolean;\n    error: string;\n    sensorReadings: Array<SensorReading | {}>;\n  }>({\n    loading: false,\n    error: '',\n    sensorReadings: [],\n  });\n  const [parseWorker] = useWorker(parseInput);\n\n  useEffect(() => {\n    setDataState({\n      loading: true,\n      error: '',\n      sensorReadings: [],\n    });\n    axios\n      .get<string>(DATA_URL)\n      .then(({ data }) => {\n        // Offload the parsing of incoming data to the web worker\n        return parseWorker(data);\n      })\n      .then((res) => {\n        setDataState({\n          loading: false,\n          error: '',\n          sensorReadings: res,\n        });\n      })\n      .catch((err) => {\n        setDataState({\n          loading: false,\n          error: err.message || 'Error',\n          sensorReadings: [],\n        });\n      });\n  }, [parseWorker]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n\n      <Table\n        sensorReadings={dataState.sensorReadings}\n        loading={dataState.loading}\n        error={dataState.error}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export const DATA_URL =\n  'https://bitbucket.org/sensatmapp/angular-take-home-test-1/raw/c071f2057457da27d051617ce2c9fbf18f1f263e/data/sensor_readings.json';\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport const AppContainer = styled.div`\n  text-align: center;\n`;\n","import Dashboard from './components/Dashboard';\nimport { AppContainer, GlobalStyle } from './styles';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        <Dashboard />\n      </AppContainer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}