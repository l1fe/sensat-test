{"version":3,"sources":["components/Dashboard/parseInput.ts","components/Dashboard/Table/styles.ts","components/Dashboard/Table/DefaultColumnFilter/styles.ts","components/Dashboard/Table/DefaultColumnFilter/index.tsx","components/Dashboard/Table/index.tsx","components/Dashboard/index.tsx","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseInput","str","split","filter","length","map","json","JSON","parse","reading_ts","Date","err","TContainer","styled","div","THeader","TBody","Th","p","canSort","Td","Tr","selector","empty","Container","Input","input","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","useState","value","setValue","count","onChange","useAsyncDebounce","val","undefined","e","target","placeholder","Table","sensorReadings","loading","error","columns","useMemo","Header","accessor","disableSortBy","disableFilters","sortType","Cell","props","formatted","toUTCString","defaultColumn","Filter","width","useTable","data","useFilters","useSortBy","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","React","useCallback","index","style","row","getRowProps","cells","cell","getCellProps","render","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canFilter","height","itemCount","itemSize","Dashboard","dataState","setDataState","useWorker","parseWorker","useEffect","axios","get","then","res","catch","message","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18a25bd2.chunk.js","sourcesContent":["import { SensorReading } from '../../types';\n\nconst parseInput = (str: string): Array<SensorReading | {}> => {\n  const parsed: Array<SensorReading | {}> = str\n    .split('\\n')\n    .filter((str) => str.length)\n    .map((str) => {\n      try {\n        const json: SensorReading = JSON.parse(str);\n        // Append Z in order to parse the date as UTC\n        json.reading_ts = new Date(`${json.reading_ts}Z`);\n        return json;\n      } catch (err) {\n        return {};\n      }\n    });\n\n  return parsed;\n};\n\nexport default parseInput;\n","import styled from 'styled-components';\n\nexport const TContainer = styled.div`\n  display: inline-block;\n  border-spacing: 0;\n  border: 1px solid black;\n`;\n\nexport const THeader = styled.div`\n  border-bottom: 1px solid black;\n  background-color: papayawhip;\n`;\n\nexport const TBody = styled.div``;\n\nexport const Th = styled.div<{ canSort?: boolean }>`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n  font-weight: 600;\n\n  ${(p) =>\n    p.canSort &&\n    `\n  background-color: yellow;\n\n  &:hover {\n    opacity: 0.5;\n  }\n  `}\n`;\n\nexport const Td = styled.div`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n`;\n\nexport const Tr = styled.div<{ empty?: boolean }>`\n  &:last-child {\n    .${Td.selector} {\n      border-bottom: 0;\n    }\n  }\n\n  ${(p) =>\n    p.empty &&\n    `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 36px;\n  `}\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  padding: 0 4px;\n  box-sizing: border-box;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n`;\n","import React, { useState } from 'react';\nimport { useAsyncDebounce } from 'react-table';\nimport { Container, Input } from './styles';\n\nconst DefaultColumnFilter: React.FC<{ column: any }> = ({\n  column: { filterValue, preFilteredRows, setFilter },\n}) => {\n  const [value, setValue] = useState(filterValue);\n  const count = preFilteredRows.length;\n\n  const onChange = useAsyncDebounce((val: string | undefined) => {\n    setFilter(val || undefined);\n  }, 200);\n\n  return (\n    <Container>\n      <Input\n        value={value || ''}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    </Container>\n  );\n};\n\nexport default DefaultColumnFilter;\n","import React, { useMemo } from 'react';\nimport {\n  useTable,\n  useBlockLayout,\n  useSortBy,\n  Column,\n  useFilters,\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nimport { SensorReading } from '../../../types';\nimport { TContainer, THeader, TBody, Tr, Td, Th } from './styles';\nimport DefaultColumnFilter from './DefaultColumnFilter';\nexport interface TableProps {\n  sensorReadings: Array<SensorReading | {}>;\n  loading: boolean;\n  error?: string;\n}\n\nexport const TABLE_HEIGHT_PX = 600;\nexport const ROW_HEIGHT_PX = 66;\n\nexport const Table: React.FC<TableProps> = ({\n  sensorReadings,\n  loading,\n  error,\n}) => {\n  const columns = useMemo(\n    () =>\n      [\n        {\n          Header: 'ID',\n          accessor: 'id',\n        },\n        {\n          Header: 'Box ID',\n          accessor: 'box_id',\n        },\n        {\n          accessor: 'sensor_type',\n          Header: 'Type of the sensor',\n          disableSortBy: false,\n          disableFilters: false,\n        },\n        {\n          Header: 'Type of data',\n          accessor: 'name',\n          disableFilters: false,\n        },\n        {\n          Header: 'Range',\n          columns: [\n            {\n              Header: 'Lower bound',\n              accessor: 'range_l',\n            },\n            {\n              Header: 'Upper bound',\n              accessor: 'range_u',\n            },\n          ],\n        },\n        {\n          Header: 'Geolocation',\n          columns: [\n            {\n              Header: 'Latitude',\n              accessor: 'latitude',\n            },\n            {\n              Header: 'Longitude',\n              accessor: 'longitude',\n            },\n          ],\n        },\n        {\n          Header: 'Measurement unit',\n          accessor: 'unit',\n        },\n        {\n          Header: 'Timestamp',\n          accessor: 'reading_ts',\n          sortType: 'datetime',\n          disableSortBy: false,\n          Cell: (props) => {\n            const formatted = props.value.toUTCString();\n            return <span>{formatted}</span>;\n          },\n        },\n      ] as Column<SensorReading | {}>[],\n    []\n  );\n\n  const defaultColumn: Partial<Column<SensorReading | {}>> = useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      disableFilters: true,\n      disableSortBy: true,\n      width: 150,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data: sensorReadings,\n      defaultColumn,\n    },\n    useFilters,\n    useSortBy,\n    useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n      prepareRow(row);\n      return (\n        <Tr\n          {...row.getRowProps({\n            style,\n          })}\n        >\n          {row.cells.map((cell) => {\n            return <Td {...cell.getCellProps()}>{cell.render('Cell')}</Td>;\n          })}\n        </Tr>\n      );\n    },\n    [prepareRow, rows]\n  );\n\n  return (\n    <TContainer {...getTableProps()}>\n      <THeader>\n        {headerGroups.map((headerGroup) => (\n          <Tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <Th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                canSort={column.canSort}\n              >\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\n                </span>\n              </Th>\n            ))}\n          </Tr>\n        ))}\n        {headerGroups.length > 0 && (\n          <Tr {...headerGroups[1].getHeaderGroupProps()}>\n            {headerGroups[1].headers.map((column) => (\n              <Th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.canFilter ? column.render('Filter') : null}\n              </Th>\n            ))}\n          </Tr>\n        )}\n      </THeader>\n\n      <TBody {...getTableBodyProps()}>\n        {rows.length > 0 ? (\n          <FixedSizeList\n            height={TABLE_HEIGHT_PX}\n            itemCount={rows.length}\n            itemSize={ROW_HEIGHT_PX}\n            width={totalColumnsWidth}\n          >\n            {RenderRow}\n          </FixedSizeList>\n        ) : (\n          <Tr empty>\n            {loading ? 'Loading' : 'No data was found'}\n            {error && `[Got an error: ${error}]`}\n          </Tr>\n        )}\n      </TBody>\n    </TContainer>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWorker } from '@koale/useworker';\n\nimport { DATA_URL } from '../../config';\nimport { SensorReading } from '../../types';\nimport parseInput from './parseInput';\nimport Table from './Table';\n\nconst Dashboard: React.FC = () => {\n  const [dataState, setDataState] = useState<{\n    loading: boolean;\n    error: string;\n    sensorReadings: Array<SensorReading | {}>;\n  }>({\n    loading: false,\n    error: '',\n    sensorReadings: [],\n  });\n  const [parseWorker] = useWorker(parseInput);\n\n  useEffect(() => {\n    setDataState({\n      loading: true,\n      error: '',\n      sensorReadings: [],\n    });\n    axios\n      .get<string>(DATA_URL)\n      .then(({ data }) => {\n        // Offload the parsing of incoming data to the web worker\n        return parseWorker(data);\n      })\n      .then((res) => {\n        setDataState({\n          loading: false,\n          error: '',\n          sensorReadings: res,\n        });\n      })\n      .catch((err) => {\n        setDataState({\n          loading: false,\n          error: err.message || 'Error',\n          sensorReadings: [],\n        });\n      });\n  }, [parseWorker]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n\n      <Table\n        sensorReadings={dataState.sensorReadings}\n        loading={dataState.loading}\n        error={dataState.error}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export const DATA_URL =\n  'https://bitbucket.org/sensatmapp/angular-take-home-test-1/raw/c071f2057457da27d051617ce2c9fbf18f1f263e/data/sensor_readings.json';\n","import './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}