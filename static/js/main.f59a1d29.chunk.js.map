{"version":3,"sources":["components/Dashboard/parseInput.ts","components/Dashboard/Table/styles.ts","components/Dashboard/Table/index.tsx","components/Dashboard/index.tsx","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseInput","str","split","map","json","JSON","parse","err","TContainer","styled","div","THeader","TBody","Th","Td","Tr","selector","Table","sensorReadings","columns","useMemo","Header","accessor","defaultColumn","React","width","useTable","data","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","useCallback","index","style","row","getRowProps","cells","cell","getCellProps","render","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","className","height","itemCount","length","itemSize","Dashboard","useState","sensorsReadings","setSensorsReadings","useWorker","parseWorker","useEffect","axios","get","then","res","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f59a1d29.chunk.js","sourcesContent":["const parseInput = (str: string): Array<object> => {\n  const parsed = str.split('\\n').map((str) => {\n    let json = {};\n    try {\n      json = JSON.parse(str);\n    } catch (err) {\n      json = {};\n    }\n    return json;\n  });\n\n  return parsed;\n};\n\nexport default parseInput;\n","import styled from 'styled-components';\n\nexport const TContainer = styled.div`\n  display: inline-block;\n  border-spacing: 0;\n  border: 1px solid black;\n`;\n\nexport const THeader = styled.div`\n  border-bottom: 1px solid black;\n  background-color: papayawhip;\n`;\n\nexport const TBody = styled.div``;\n\nexport const Th = styled.div`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n  font-weight: 600;\n`;\n\nexport const Td = styled.div`\n  margin: 0;\n  padding: 0.5rem;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n`;\n\nexport const Tr = styled.div`\n  &:last-child {\n    .${Td.selector} {\n      border-bottom: 0;\n    }\n  }\n`;\n","import React, { useMemo } from 'react';\nimport { useTable, useBlockLayout } from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nimport { TContainer, THeader, TBody, Tr, Td, Th } from './styles';\n\nexport interface TableProps {\n  sensorReadings: Array<object>;\n}\n\nexport const TABLE_HEIGHT_PX = 600;\nexport const ROW_HEIGHT_PX = 66;\n\nexport const Table: React.FC<TableProps> = ({ sensorReadings }) => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id',\n      },\n      {\n        Header: 'Box ID',\n        accessor: 'box_id',\n      },\n      {\n        Header: 'Type of the sensor',\n        accessor: 'sensor_type',\n      },\n      {\n        Header: 'Type of data',\n        accessor: 'name',\n      },\n      {\n        Header: 'Range',\n        columns: [\n          {\n            Header: 'Lower bound',\n            accessor: 'range_l',\n          },\n          {\n            Header: 'Upper bound',\n            accessor: 'range_u',\n          },\n        ],\n      },\n      {\n        Header: 'Geolocation',\n        columns: [\n          {\n            Header: 'Latitude',\n            accessor: 'latitude',\n          },\n          {\n            Header: 'Longitude',\n            accessor: 'longitude',\n          },\n        ],\n      },\n      {\n        Header: 'Measurement unit',\n        accessor: 'unit',\n      },\n      {\n        Header: 'Timestamp',\n        accessor: 'reading_ts',\n      },\n    ],\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 150,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data: sensorReadings,\n      defaultColumn,\n    },\n    useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n      prepareRow(row);\n      return (\n        <Tr\n          {...row.getRowProps({\n            style,\n          })}\n        >\n          {row.cells.map((cell) => {\n            return <Td {...cell.getCellProps()}>{cell.render('Cell')}</Td>;\n          })}\n        </Tr>\n      );\n    },\n    [prepareRow, rows]\n  );\n\n  return (\n    <TContainer {...getTableProps()}>\n      <THeader>\n        {headerGroups.map((headerGroup) => (\n          <Tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <Th {...column.getHeaderProps()} className=\"th\">\n                {column.render('Header')}\n              </Th>\n            ))}\n          </Tr>\n        ))}\n      </THeader>\n\n      <TBody {...getTableBodyProps()}>\n        <FixedSizeList\n          height={TABLE_HEIGHT_PX}\n          itemCount={rows.length}\n          itemSize={ROW_HEIGHT_PX}\n          width={totalColumnsWidth}\n        >\n          {RenderRow}\n        </FixedSizeList>\n      </TBody>\n    </TContainer>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWorker } from '@koale/useworker';\n\nimport { DATA_URL } from '../../config';\nimport parseInput from './parseInput';\nimport Table from './Table';\n\nconst Dashboard: React.FC = () => {\n  const [sensorsReadings, setSensorsReadings] = useState<Array<object>>([]);\n  const [parseWorker] = useWorker(parseInput);\n\n  useEffect(() => {\n    axios.get<string>(DATA_URL).then(({ data }) => {\n      parseWorker(data).then((res) => {\n        setSensorsReadings(res);\n      });\n    });\n  }, [parseWorker]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n\n      <Table sensorReadings={sensorsReadings} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export const DATA_URL =\n  'https://bitbucket.org/sensatmapp/angular-take-home-test-1/raw/c071f2057457da27d051617ce2c9fbf18f1f263e/data/sensor_readings.json';\n","import './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}